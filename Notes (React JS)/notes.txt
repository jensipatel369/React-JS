Library and Frame work difference :-
-> Library and frame work both provide pre-return code and functionality's but frame work is fully independent but library is not.

...React JS...

React JS :-
-> React is a JavaScript library. Maintain and develop by facebook. Use to create single page application and provide us reach user interface (UI).

Features React JS :-
-> Components
-> virtual DOM
-> JSX (JavaScript XML)
-> One-Way Data Binding (One-way data flow)

React JS project run Commands :-
1. npm create vite
2. npm i
3. npm dev


...Full Form...

SWC :- Speedy Web Compiler  
npm :- Node package manager
npx :- Node Package eXecute
jsx :- JavaScript XML


...Module...

Module :- These are user define files or block of code which we can import and export.


...JSX...

JSX :- JavaScript XML it allows us to write HTML with JavaScript together. Represent by {}.


...Component...

Component :- Component is a re-usable piece of code returns a part of UI.
-> There are 2 (two) type of component :-
   1. Functional Base Component :- When we write a simple JavaScript function in a component and it return some value.
   2. Class Base Component :- When we write ES6 classes (oops) in a component.

-> Function mate :- rfc - React Function Component
-> Class mate :- rcc - React Class Component



.... Class Component .... 

-> Class components have all the features of react JS like state, props, life cycle methods and all but functional components does not have those initially.

-> Class Component Features :-
   1. state
   2. Props
   3. Life Cycle

-> In react 16.8 hooks were introduced which provide all the features of react in functional components.

1.Life cycle:-
  -> There are three life cycle stages :-  
    1. Mounting :- Creation of a components
    2. Updating :- Updation of a components
    3. Unmounting :- Completion of a components

  -> Life cycle Methods in Class Components :-
    1.componentDidMount()
    2.componentDidUppdate()
    3.componentWillUnmount()

  -> Life cycle method in functional components there is a hook called useEffect()

2. State :- 
-> In React, "state" refers to a JavaScript object that holds data specific to a component, which can change over time and influence the component's rendering. 
-> state (this.state) Target

3. Props :-
-> Props stands for properties used to pass data from parent to child component. This is a fundamental concept of react JS.



...Hooks...

Hooks :- Hooks in React are functions that allow you to "hook into" React state and lifecycle features from functional components. Introduced in React 16.8, they enable the use of state, side effects, and other React features without the need for class components. 

1. useState :-  The useState Hook in React allows functional components to manage and track state, which refers to data or properties that can change over time within an application.

2. useEffect :- 
-> This is a important hook used to perform side effects in functional components like data fetching and API calling.
-> We can also perform life cycle methods in functional components using useEffect hook.

3. useRef :- This is a hook used to create mutable reference with DOM elements and it does not cause re-render. 


...Key...

Key :- Keys are special string attributes that you must include when creating lists of elements in React. They help React efficiently identify which items  in a list have changed, been added, or been removed.


...Fragments...

Fragments :- React Fragments are a feature in React that allow you to group multiple elements returned by a component's render method without adding an extra node to the DOM.

